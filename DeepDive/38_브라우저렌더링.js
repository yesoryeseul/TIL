/*
## 브라우저 렌더링 과정

- 브라우저가 HTML, CSS, Javascript로 작성된 텍스트 문서를 어떻게 파싱(해석)하여 브라우저에 렌더링하는 과정을 알아보자
- 파싱(parsing)이란?
    
    > 파싱(구문 분석, Syntax analysis)은 프로그래밍 언어의 문법에 맞게 작성된 텍스트 문서를 읽어 들여 실행하기 위해 텍스트 문서의 문자열 토큰(token)으로 분해(어휘 분석, exical analysis)하고, 토큰에 문법적 의미와 구조를 반영하여 트리 구조의 자료구조인 파스 트리(parse tree/syntax tree)를 생성하는 일련의 과정을 말한다. 일반적으로 파싱이 완료된 이후에는 파스 트리를 기반으로 중간 언어인 바이트코드(bytecode)를 생성하고 실행한다.
    > 
- 렌더링(Rendering)이란?
    
    > HTML, CSS, 자바스크립트로 작성된 문서를 파싱하여 브라우저에 시각적으로 출력하는 것을 말한다.
    > 
- 브라우저 렌더링 과정
    1. 브라우저는 HTML, CSS, 자바스크립트, 이미지, 폰트 파일 등 ***렌더링에 필요한 리소스***를 ***요청***하고 ***서버로부터 응답***을 받는다
    2. 브라우저의 렌더링 엔진은 서버로부터 응답된 HTML과 CSS를 ***파싱***하여 DOM과 CSSOM을 생성하고 이들을 결합하여 ***렌더 트리를 생성***한다
    3. 브라우저의 자바스크립트 엔진은 서버로부터 응답된 자바스크립트를 파싱하여 AST(Absctract Syntax Tree)를 생성하고 바이트코드로 변환하여 실행한다. 이때 자바스크립트는 DOM API를 통해 DOM이나 CSSOM을 변경할 수 있다. 변경된 DOM과 CSSOM은 다시 렌더 트리로 결합된다
    4. 렌더 트리를 기반으로 HTML 요소의 레이아웃(위치와 크기)을 계산하고 브라우저 화면에 HTML 요소를 페인팅한다
    

## 요청과 응답

- 브라우저에서 서버에 리소스를 요청하고 응답한 리소스를 파싱하여 렌더링 하는 과정에서
- 서버에 요청을 전송하기 위해 브라우저는 주소창을 제공한다.
- 브라우저의 주소창에 URL을 입력하고 엔터 키를 누르면 URL의 호스트 이름이 DNS를 통해 IP 주소로 변환되고 이 IP 주소를 갖는 서버에게 요청을 전송한다.
  1. 브라우저의 주소창에 [https://poiemaweb.com을](https://poiemaweb.com을) 입력하고 엔터키를 누르면 **루트 요청**이 poiemaweb.com 서버로 전송한다
  2. 루트 요청에는 명확히 리소스를 요청하는 내용이 없지만 일반적으로 서버는 루트 요청에 대해 암묵적으로 ***index.html*** 을 응답하도록 기본 설정 되어있다. 즉, [https://poiemaweb.com](https://poiemaweb.com) 는  [https://](https://poiemaweb.com)[poiemaweb.com/index.html](http://poiemaweb.com/index.html과) 과 같은 요청이다
  3. 따라서 서버는 루트 요청에 대해 서버의 루트 폴더에 존재하는 정적 파일인 index.html을 클라이언트(브라우저)로 응답한다.
  4. 만약 index.html이 아닌 다른 정적 파일을 서버에 요청하려면 브라우저의 주소창에 [https://](https://poiemaweb.com)[poiemaweb.com/](http://poiemaweb.com/index.html과)assets/data/data.json 과 같이 요청할 정적 파일의 경로와 파일 이름을 URI의 호스트 두에 패스(path)에 기술하여 서버에 요청한다. 그러면 서버는 루트 폴더의 assets/data 폴더 내에 있는 정적 파일 data.json을 응답할 것이다.
  5. 반드시 브라우저의 주소창을 통해  서버에게 정적 파일만을 요청할 수 있는 것은 아니다. 자바스크립트를 통해 동적으로 서버에 정적/동적 데이터를 요청할 수도 있다.(ajax, rest api 관련)
  6. 요청과 응답은 개발자 도구 Network 패널에서 확인할 수 있다.
  7. 요청하지 않은 리소스들이 패널에 응답되는 이유? 
      1. 브라우저의 렌더링 엔진이 HTML(index.html)을 파싱하는 도중에 외부 리소스를 로드하는 태그, 즉 CSS 파일을 로드하는 link 태그, 이미지 파일을 로드하는 img 태그, 자바스크립트를 로드하는 script 태그 등을 만나면 HTML의 파싱을 일시 중단하고 해당 리소스 파일을 서버로 요청하기 때문

## HTTP 1.1과 HTTP 2.0

- HTTP(Hyper Text Transfer Protocol)는 웹에서 브라우저와 서버가 통신하기 위한 프로토콜(규약)이다.
- HTTP/1.1 과 HTTP/2.0의 차이점
    - HTTP/1.1
        
        : 커넥션당 하나의 요청과 응답만 처리한다.
        
        : 즉, 여러 개의 요청을 한 번에 전송할 수 없고 응답 또한 마찬가지다.
        
        : 따라서 HTML, 문서 내에 포함된 여러 개의 리소스 요청, 즉 CSS 파일을 로드하는 link 태그, 이미지 파일을 로드하는 img 태그, 자바스크립트를 로드하는 script 태그 등에 의한 리소스 요청이 개별적으로 전송되고 응답 또한 개별적으로 전송된다.
        
        : 이처럼 HTTP/1.1은 리소스의 동시 전송이 불가능한 구조이므로 요청할 리소스의 개수에 비례하여 응답 시간도 증가하는 단점이 있다.
        
    - HTTP/2.0
        
        : 여러 리소스의 동시 전송이 가능하므로 HTTP/1.1에 비해 페이지 로드 속도가 약 50% 정도 빠르다고 알려져 있다.

## HTML 파싱과 DOM 생성

- 브라우저의 요청에 의해 서버가 응답한 HTML 문서는 문자열로 이루어진 순수한 텍스트다. 순수한 텍스트인 HTML 문서를 브라우저에 시각적인 픽셀로 렌더링하려면 HTML 문서를 브라우저가 이해할 수 있는 자료구조(객체)로 변환하여 메모리에 저장해야 한다.
- 브라우저 렌더링 엔진은 응답받은 HTML 문서를 파싱하여 브라우저가 이해할 수 있는 자료구조인 **DOM(Document Object Model)**을 생성한다
- DOM은 HTML 문서를 파싱한 결과물이다

## CSS파싱과 CSSOM 생성

- 렌더링 렌진은 meta태그까지 HTML을 순차적으로 해석한 다음, link 태그를 만나면 DOM 생성을 일시 중단하고 link 태그의 href 어트리뷰트에 지정된 CSS 파일을 서버에 요청한다.
- 서버로부터 CSS 파일이 응답되면 렌더링 엔진은 HTML과 동일한 해석 과정(바이트 → 문자 → 토큰 → 노드 → CSSOM)을 거쳐 CSS를 파싱하여 CSSOM을 생성한다.
- CSSOM은 CSS의 상속을 반영하여 생성된다.

## 렌더 트리 생성

- 렌더링 엔진은 서버로부터 응답된 HMTL과 CSS를 파싱하여 각 DOM과 CSSOM를 생성
- DOM과 CSSOM은 렌더링을 위해 렌더 트리(Render Tree)로 결합
- 브라우저 화면에 렌더링되지 않는 노드 (예: meta 태그, script 태그 등)와 CSS에 의해 비표시(display: none) 되는 노드들은 포함하지 않는다.
- ***렌더 트리는 브라우저 화면에 렌더링되는 노드만으로 구성된다!***
- 이후 완성된 렌더 트리는 각 HTML 요소의 레이아웃(위치와 크기)를 계산하는 데 사용되며 브라우저 화면에 픽셀을 렌더링하는 페인팅(painting) 처리에 입력된다.

## 자바스크립트 파싱과 실행

- CSS 파싱 과정과 마찬가지로 렌더링 엔진은 HTML을 한 줄씩 순차적으로 파싱하며 DOM을 생성해 나가다가 자바스크립트 파일을 로드하는 script 태그나 자바스크립트 코드를 콘텐츠로 담은 script 태그를 만나면 DOM 생성을 일시 중단한다.
- 그리고 script 태그의 src 어트리뷰트에 정의된 자바스크립트 파일을 서버에 요청하여 로드한 자바스크립트 파일이나 script 태그 내의 자바스크립트 코드를 파싱하기 위해 자바스크립트 엔진에 제어권을 넘긴다.
- 이후 자바스크립트 파싱과 실행이 종료되면 렌더링 엔진으로 다시 제어권을 넘겨 HTML 파싱이 중단된 지점부터 다시 HTML 파싱을 시작하여 DOM 생성을 재개한다.
- 자바스크립트 파싱과 실행은 자바스크립트 엔진이 처리하는데, 이때 자바스크립트 엔진은 자바스크립트를 해석하여 **AST(Abstract Syntax Tree, 추상적 구문 트리)** 를 생성한다.
- 그리고 AST를 기반으로 인터프리터가 실행할 수 있는 중간 코드인 **바이트코드**를 생성하여 실행한다.

## 리플로우와 리페인트

- 렌더트리가 생성된 후 DOM 또는 CSSOM이 변경되면, 변경된 부분부터 다시 렌더링 트리를 생성하고, 레이아웃과 페인팅 처리를 다시 수행하는데 이를 **리플로우(Reflow)와 리페인트(Repaint)** 라고 한다.
- 리플로우는 노드의 레이아웃 변경 시 전체의 레이아웃을 다시 계산하는 것을 의미한다.
- 리페인트는 노드의 스타일 변경 시 재결합된 렌더 트리를 기반으로 해당 노드를 다시 그리는 것을 의미한다.
- 따라서 리플로우와 리페인트가 반드시 순차적으로 동시에 실행되는 것은 아니다. 레이아웃에 영향이 없는 변경은 리플로우 없이 리페인트만 실행된다.
- 리플로우와 리페인트는 성능 저하를 유발하므로 최대한 발생하지 않도록 주의해야 한다.

## 자바스크립트 파싱에 의한 HTML 파싱 중단

- HTML 파싱 도중 script 태그를 만나면 DOM 생성을 일시 중단한다.
    
    → 즉, 자바스크립트 엔진은 병렬적으로 파싱을 진행하지 않고 직렬적으로 파싱을 수행한다.
    
- 이처럼 브라우저는 동기적(synchronous)으로, 즉 위에서 아래 방향으로 순차적으로 HTML, CSS, 자바스크립트를 파싱하고 실행한다.
- 이것은 script 태그 위치에 따라 HTML 파싱이 블로킹되어 DOM 생성이 지연될 수 있다는 것을 의미한다.
- 파싱 중단 예)
    - script 파싱 실행 시 DOM이나 CSSOM을 변경하는 DOM API를 사용할 경우 DOM이나 CSSOM이 이미 생성되어 있어야 하는데 그렇지 않으면 에러가 발생하여 정상 작동 하지 않는다.
    - 이러한 문제를 회피하기 위해 body 요소의 가장 아래에 자바스크립트를 위치시키는 것은 좋은 아이디어다.
    - 또한 자바스크립트 로딩/파싱/실행으로 인해 HTML 요소들의 렌더링에 지장받는 일이 발생하지 않아 페이지 로딩 시간이 단축되는 장점이 있다.

## script 태그의 async/defer 어트리뷰트

- 자바스크립트 파싱에 의한 DOM 생성이 중단되는 문제를 근본적으로 해결하기 위해 HTML5부터 script 태그에 async와 defer 어트리뷰트가 추가되었다.
- src 어트리뷰

트를 통해 외부 자바스크립트 파일을 로드하는 경우에만 사용 가능하다.(인라인 불가)

```jsx
<script async src="extern.js"></script>
<script defer src="extern.js"></script>
```

→ async와 defer 어트리뷰트를 사용하면 HTML 파싱과 외부 자바스크립트 파일의 로드가 비동기적(asynchronous)으로 동시에 진행된다. 하지만 실행 시점에 차이가 있다.
*/
