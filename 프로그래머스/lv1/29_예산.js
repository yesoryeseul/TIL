/*예산
문제 설명
S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다. 그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.

물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며, 1,000원보다 적은 금액을 지원해 줄 수는 없습니다.

부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.

입출력 예
d	budget	result
[1,3,2,5,4]	9	3
[2,2,3,3]	10	4
*/

/*
d 배열 안에 있는 값을 합했을 때 budget 에 맞는 최대 갯수를 return 
1. d 배열을 오름차순으로 sort - sort 메서드
2. d배열을 앞에서부터 순회하면서 budget에서 각 부서 금액을 빼면서 지원가능 부서 수를 센다 - reduce 메서드
3. budget에서 금액을 뺄 때, bugdet이 0 미만이 되면 종료
 */

function solution(d, budget) {
  let sortArr = d.sort((a, b) => a - b); // [1, 2, 3, 4, 5]
  return sortArr.reduce((acc, cur) => {
    if (budget >= cur) {
      // 9 >= 1 / 8 >= 2 / 6 >= 3 / 3 >= 4 (성립x)
      budget -= cur; // 9 - 1 = 8, 8 - 2 = 6, 6 - 3 = 3
      return acc + 1; // 0 + 1 = 1, 1 + 1 = 2, 2 + 1 = 3
    }
    return acc;
  }, 0);
}

console.log(solution([1, 3, 2, 5, 4], 9));
console.log(solution([2, 2, 3, 3], 10));
